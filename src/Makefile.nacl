PROJECT:=ibniz
C_SOURCES:=ui_sdl.c vm_slow.c clipboard.c compiler.c
CXX_SOURCES:=nacl.cc


#
# Get pepper directory for toolchain and includes.
#
# If PEPPER_ROOT is not set, then assume it can be found a two directories up,
# from the default example directory location.
#
THIS_MAKEFILE:=$(abspath $(lastword $(MAKEFILE_LIST)))
NACL_SDK_ROOT?=$(abspath $(dir $(THIS_MAKEFILE))../..)

#
# Compute tool paths
#
#
OSNAME:=$(shell python $(NACL_SDK_ROOT)/tools/getos.py)
TC_PATH:=$(abspath $(NACL_SDK_ROOT)/toolchain/$(OSNAME)_x86_newlib)
CXX:=$(TC_PATH)/bin/i686-nacl-g++
CC:=$(TC_PATH)/bin/i686-nacl-gcc
SDL_CONFIG:=$(TC_PATH)/i686-nacl/usr/bin/sdl-config
SDL_CONFIG_32:=$(TC_PATH)/i686-nacl/usr/bin/sdl-config
SDL_CONFIG_64:=$(TC_PATH)/x86_64-nacl/usr/bin/sdl-config
LDFLAGS_32:=`$(SDL_CONFIG_32) --libs` -lppapi_cpp -lppapi -lnosys
LDFLAGS_64:=`$(SDL_CONFIG_64) --libs` -lppapi_cpp -lppapi -lnosys
CFLAGS:=`$(SDL_CONFIG) --cflags`
CXXFLAGS:=`$(SDL_CONFIG) --cflags`

#
# Disable DOS PATH warning when using Cygwin based tools Windows
#
CYGWIN ?= nodosfilewarning
export CYGWIN


# Declare the ALL target first, to make the 'all' target the default build
all: $(PROJECT)_x86_32.nexe $(PROJECT)_x86_64.nexe

# Define 32 bit compile and link rules for C++ sources
x86_32_C_OBJS:=$(patsubst %.c,%_32.o,$(C_SOURCES))
$(x86_32_C_OBJS) : %_32.o : %.c $(THIS_MAKE)
	$(CC) -o $@ -c $< -m32 -O3 $(CFLAGS)

x86_32_CXX_OBJS:=$(patsubst %.cc,%_32.o,$(CXX_SOURCES))
$(x86_32_CXX_OBJS) : %_32.o : %.cc $(THIS_MAKE)
	$(CXX) -o $@ -c $< -m32 -O3 $(CXXFLAGS)

$(PROJECT)_x86_32.nexe : $(x86_32_C_OBJS) $(x86_32_CXX_OBJS)
	$(CXX) -o $@ $^ -m32 -O0 -g $(CXXFLAGS) $(LDFLAGS_32)

# Define 64 bit compile and link rules for C++ sources
x86_64_C_OBJS:=$(patsubst %.c,%_64.o,$(C_SOURCES))
$(x86_64_C_OBJS) : %_64.o : %.c $(THIS_MAKE)
	$(CC) -o $@ -c $< -m64 -O0 -g $(CFLAGS)

x86_64_CXX_OBJS:=$(patsubst %.cc,%_64.o,$(CXX_SOURCES))
$(x86_64_CXX_OBJS) : %_64.o : %.cc $(THIS_MAKE)
	$(CXX) -o $@ -c $< -m64 -O0 -g $(CXXFLAGS)

$(PROJECT)_x86_64.nexe : $(x86_64_C_OBJS) $(x86_64_CXX_OBJS)
	$(CXX) -o $@ $^ -m64 -O0 -g $(CXXFLAGS) $(LDFLAGS_64)


.PHONY: clean
clean:
	rm -f *.o *.nexe
